import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

import javax.swing.DefaultListModel;

public class Track {
	private int guessesLeft;									// Declares data member to store the guesses left in the track
																// to figure out the number generated
	
	private int numberToGuess;									// Declares data member to store the number that needs to be guessed
	
	private DefaultListModel<String> numbersGuessed;			// Declares data member to store the all the numbers that the player
																// inputs in the track  while trying to guess the correct one
	
	private boolean answered;
	
	public Track() {
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		// Method				:	Track()
		//
		// Method parameters	:	none
		//
		// Method return		:	void
		//
		// Synopsis				:   This method is called as a constructor when an object of type Track is instantiated.
		//							It defines the integer data members of the object so that they are all 0 and 
		//							instantiates numbersGuesses as an empty arrayList so that it can later be filled.
		//
		// Modifications		:
		//							Date			Developer				Notes
		//							----			---------				-----
		//							2023-05-25		A. Mojica				Initial setup
		//
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		guessesLeft = 0;										// Instantiates the data member "guessesLeft" as 0
		numberToGuess = 0;										// Instantiates the data member "numberToGuess" as 0
		answered = false;
		numbersGuessed = new DefaultListModel<String>();		// Instantiates the data member "numbersGuessed" as an empty 
																// arrayList of Integers
	}
	
	public void DetermineNumberToGuess(int maxValue) {
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		// Method				:	void DetermineNumberToGuess(int maxValue)
		//
		// Method parameters	:	maxValue	- used to pass the value to the method GenerateNumberList 
		//
		// Method return		:	void
		//
		// Synopsis				:   This method is called to determine what number the player needs to guess for a track
		//							in particular. It calls for the method that generates a random number and the one that
		//							checks for the mode to make sure that more numbers keep being generated until there
		//							is just a single mode. When a mode is found, it stores it in the "numberToGuess"
		//							data member.
		//
		// Modifications		:
		//							Date			Developer				Notes
		//							----			---------				-----
		//							2023-05-26		A. Mojica				Initial setup
		//
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		int[] numberCount;										//Instantiates a list to store the list returned from 
																//the GenerateNumberList method with the count of the numbers
		
		int mode = 0;											// Instantiates int to store the mode
		
		boolean done = false;									// Instantiates boolean to control the while loop
		
		while(!done)											// while no mode has been found
		{														// Calls method to generate a list of 1000 random numbers
			numberCount = GenerateNumberList(maxValue);			// and stores the count of the numbers
			mode = FindMode(numberCount);						// to later pass it to the method that finds the mode

			
			if(mode!= 0)										//If the mode received from the method is different to 0
				done = true;									// it means a mode was found and the loop ends
		}
		
		System.out.println(mode);
		numberToGuess = mode;									//When a mode is found, it's stored in the "numberToGuess" 
	}															// data member
	
	private int[] GenerateNumberList(int maxValue) {
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		// Method				:	int[] GenerateNumberList(int maxValue)
		//
		// Method parameters	:	maxValue	- used to determine the highest number that can be generated by the random
		//
		// Method return		:	int[]
		//
		// Synopsis				:   This method is called to generate a list with a thousand random numbers.
		//							It generates the numbers inside a loop, taking the parameter passed as the maximum
		//							possible value the numbers can take, and stores in a list the count of how many times
		//							each number was generated, returning this list at the end.
		//
		// Modifications		:
		//							Date			Developer				Notes
		//							----			---------				-----
		//							2023-05-26		A. Mojica				Initial setup
		//
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		Random random = new Random();									//Instantiates random to generate random numbers
		
		int[] numberCount = new int[maxValue];							//Instantiates a list the size of the maxValue
																		//to store the count of how many times each number
																		// within that range is generated
		
		int currentNumber;												//Instantiates int to reference the numbers generated in the loop		
		int counter;													//Instantiates int to control the iterations of the loop
		
		for(counter = 0; counter < 1000; counter++) {					// It goes into a loop a thousand times
			currentNumber = random.nextInt(maxValue)+1;					// each loop it generates a random number from 1 to the maxValue passed
			numberCount[currentNumber-1]++;								// and adds 1 to the position in the numberCount list corresponding to the
		}																// number that was just generated
			
		
		return numberCount;												// returns the list with the count of all the numbers generated
	}
	
	private int FindMode(int[] numberCount) {
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		// Method				:	int FindMode(int[] numberCount)
		//
		// Method parameters	:	numberCount	- used to compare how many times each number was generated
		//
		// Method return		:	int
		//
		// Synopsis				:   This method is called which number is repeated most from a given list that stores the count
		//							of different numbers.
		//							It generates the numbers inside a loop, taking the parameter passed as the maximum
		//							possible value the numbers can take, and stores in a list the count of how many times
		//							each number was generated, returning this list at the end.
		//
		// Modifications		:
		//							Date			Developer				Notes
		//							----			---------				-----
		//							2023-05-26		A. Mojica				Initial setup
		//
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		
		int maxNumber;													//Instantiates int to store the biggest count within the list
		int counter;													//Instantiates int to control the iterations of the loop
		
		int numberCountSize = numberCount.length;						//Defines integer to store the length of the numberCount list
		int [] listCopy = numberCount.clone();							//Creates a copy of the numberCount list and stores it 
																		//in the listCopy variable
		
		Arrays.sort(listCopy);											//Sorts the copy of the list from lowest to highest
		maxNumber = listCopy[numberCountSize-1];						//Defines maxNumber as the last number of the sorted list
		
		if(listCopy[numberCountSize-2] == maxNumber)					//if the highest count is also in the second to last position of the sorted list,
			return 0;													//it means that there is more than one mode in the list and returns 0
		
		else {															//else, 
			for(counter = 0; counter < numberCountSize; counter ++) {	//it goes through the original unsorted list to find which position 
				if( numberCount[counter] == maxNumber)					//had that count and returns the position+1 so that it represents the 
					return counter+1;									//appropriate number as the mode
			}
		}
		 return 0;														// if no mode is found, returns 0
	}

	public int getGuessesLeft() {														//Getter for the data member "guessesLeft"
		return guessesLeft;																//returns the object's current guessesLeft value
	}

	public void setGuessesLeft(int guessesLeft) {										// Setter for the data member "guessesLeft"
		this.guessesLeft = guessesLeft;													// stores in the object's data member "guessesLeft"
	}																					// the number given

	public int getNumberToGuess() {														//Getter for the data member "numberToGuess"							
		return numberToGuess;															//returns the object's current numberToGuess value
	}

	public void setNumberToGuess(int numberToGuess) {									// Setter for the data member "numberToGuess"
		this.numberToGuess = numberToGuess;												// stores in the object's data member "numberToGuess"
	}																					// the number given

	public DefaultListModel<String> getNumbersGuessed() {								//Getter for the data member "numbersGuessed"
		return numbersGuessed;															//returns the object's current numbersGuessed value
	}

	public void setNumbersGuessed(DefaultListModel<String> numbersGuessed) {			// Setter for the data member "numbersGuessed"
		this.numbersGuessed = numbersGuessed;											// stores in the object's data member "numbersGuessed"
	}																					// the number list given

	public boolean isAnswered() {
		return answered;
	}

	public void setAnswered(boolean answered) {
		this.answered = answered;
	}
	
}
